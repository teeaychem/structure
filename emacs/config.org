-*- mode: org -*-
#+startup: overview content
# #+PROPERTY: header-args :results silent

* to investigate

https://wilkesley.org/~ian/xah/emacs/emacs.html
https://www.reddit.com/r/emacs/comments/1ai00g5/more_totally_evident_but_super_useful_emacs/

https://github.com/wilfred/helpful
https://github.com/alexander-miller/treemacs
https://github.com/editorconfig/editorconfig-emacs?tab=readme-ov-file https://editorconfig.org

* temp

* startup

from https://github.com/howardabrams/dot-files/blob/master/emacs.org

#+begin_src emacs-lisp
;; (setq debug-on-error t)
;; (emacs-init-time)
#+end_src

#+begin_src emacs-lisp
(setq package-enable-at-startup nil) ;; don't make installed packages available before loading the init.el file.
;; (setq frame-inhibit-implied-resize t)
#+end_src

#+begin_src emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold (* 128 1024 1024)) ;; 128mb
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold me/gc-cons-threshold
                           gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  ;; defer it so that commands launched immediately after will enjoy the benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
(setq garbage-collection-messages nil)
#+end_src

increase the amount of data which emacs reads from the process#

#+begin_src emacs-lisp
(setq read-process-output-max (* 4 1024 1024))
#+end_src

* general

** mac

#+begin_src emacs-lisp
(use-package emacs
  :if (memq system-type '(mac ns darwin))
  :custom
  (mac-command-modifier 'meta)
  (mac-option-modifier 'option)
  (mac-right-option-modifier 'left)
  (mac-control-modifier 'control)
  (mac-pass-command-to-system t))
#+end_src

** emacs

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'. Display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args) (cons (format "[CRM%s] %s" (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator) (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers. Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  (setq enable-recursive-minibuffers t)
  (setq tab-always-indent 'complete) ;; Enable indentation+completion using the TAB key.

  (global-auto-revert-mode t) ; for reloading bib files, etc.
  (desktop-save-mode)
  (save-place-mode t)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (delete-selection-mode t) ;; delete selected text by typing
  (global-subword-mode t)

  (setq native-comp-async-report-warnings-errors nil)
  ;; (setopt package-install-upgrade-built-in t) ;; show updates to built in packages

  (define-key key-translation-map (kbd "M-¥") (kbd "("))
  (define-key key-translation-map (kbd "M-[") (kbd "("))

  :custom
  (user-full-name "bsparkes")
  (user-mail-address "bsparkes@alumni.stanford.edu")
  (indicate-empty-lines t)
  (require-final-newline t)
  (echo-keystrokes 0.1) ;; turn down time to echo keystrokes so no waiting for things to happen.
  (sentence-end-double-space nil)

  (auto-save-interval 200) ;; autosave often

  (minibuffer-prompt-properties '(read-only t
                                  cursor-intangible t
                                  face minibuffer-prompt)) ;; Do not allow the cursor in the minibuffer prompt

  :bind
  (("C-z" . ignore)
   ("C-x k" . kill-current-buffer)
   ("C-x K" . kill-buffer)
   ("RET" . newline-and-indent) ;; go to indentation on new line
   ("<S-down-mouse-1>" . mouse-save-then-kill) ;; remove buffer-face on shift click
   ("<mouse-2>" . ignore) ;; figure out what to do with middle button…
   ("<mouse-3>" . context-menu-open))

  :hook
  (before-save . delete-trailing-whitespace))
#+end_src

*** saving & backups

Parts from http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save/

#+begin_src emacs-lisp
(use-package emacs
  :init
  (savehist-mode t)

  (setq-default trash-directory "~/.Trash/emacs")
  (setq-default delete-by-moving-to-trash t)

  :custom
  (savehist-file  (concat user-emacs-directory "var/savehist"))
  (savehist-additional-variables
        '(buffer-name-history
          compile-command
          extended-command-history
          file-name-history
          kill-ring))

  (backup-directory-alist `(("." . ,(concat user-emacs-directory "var/backups"))) ;; change backup location
                          backup-by-copying t       ; don't clobber symlinks
                          kept-new-versions 10      ; keep 10 latest versions
                          kept-old-versions 0       ; don't bother with old versions
                          delete-old-versions t     ; don't ask about deleting old S versions
                          version-control t         ; number backups
                          vc-make-backup-files nil) ; backup version controlled files

  (create-lockfiles nil) ;; no need to create lockfiles
)
#+end_src

*** locale

#+begin_src emacs-lisp
;; (set-locale-environment "en_gb.utf-8")
;; (setenv "lang" "en_gb.utf-8")

(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(when (fboundp 'set-charset-priority) (set-charset-priority 'unicode))
(setq locale-coding-system 'utf-8)
#+end_src

*** recent files

https://robbmann.io/emacsd/

#+begin_src emacs-lisp
(recentf-mode t)
(defun sparkes/find-recent-file ()
  "Find a file that was recently visted using completing-read."
  (interactive)
  (find-file (completing-read "Find recent file: " recentf-list nil t)))

(global-set-key (kbd "C-c r") #'sparkes/find-recent-file)
#+end_src

* visual

** display

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq-default fill-column 1024)
  (set-default 'truncate-lines nil)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines) (toggle-indicate-empty-lines))
  (global-visual-line-mode t)

  ;; (setq-default left-margin-width 1
  ;;               right-margin-width 1)
  ;; (set-window-buffer nil (current-buffer))
  (add-to-list 'default-frame-alist '(internal-border-width . 4))
  (set-frame-parameter nil 'internal-border-width 4)

  :custom
  (uniquify-buffer-name-style 'forward) ; unique buffer names

  (line-number-mode t) ; show line-number in the mode line
  (column-number-mode t) ; show column-number in the mode line

  (auto-fill-mode t) ;; wrap lines automatically

  (scroll-bar-mode nil)
  (horizontal-scroll-bar-mode nil)

  (tool-bar-mode nil)
  (menu-bar-mode nil)

  (tool-bar-border 0)
  (tool-bar-images-pixel-height 6)
  (tool-bar-style 'text) ;; text, image

  (tooltip-mode nil)
  (use-dialog-box nil)
  (tooltip-use-echo-area t) ;; have emacs use the echo area for everything

  (truncate-string-ellipsis "…")

  (cursor-in-non-selected-windows t)  ; hide the cursor in inactive windows
  (help-window-select t)              ; select help window so it's easy to quit it with 'q')

  (visible-bell t)

  (scroll-preserve-screen-position t)

  (mouse-wheel-follow-mouse 't)
  ;; (mouse-wheel-scroll-amount '(1 ((shift) . 1)))

  (split-height-threshold 0) ;; When split is automatic, always split windows vertically
  (split-width-threshold nil)
  )
#+end_src

** font

#+begin_src emacs-lisp :results silent
(use-package emacs
  :if (memq system-type '(mac ns darwin))
  :init
  (set-face-attribute 'default nil
                      :family "M+1Code Nerd Font Mono"; "Maple Mono NF" "JuliaMono"
                      :height 140)
  (setq-default line-spacing 1)
  (setq-default mac-allow-anti-aliasing t)
  (setq inhibit-compacting-font-caches t)

  (global-font-lock-mode t)
  (global-hi-lock-mode nil)

  :custom
  (ns-use-thin-smoothing t)

  (font-lock-maximum-decoration t)
  (jit-lock-contextually t)
  (jit-lock-stealth-verbose t)
)
#+end_src

** themes

#+begin_src emacs-lisp :results silent
  (use-package doom-themes
    :pin melpa
    :config
    (setq doom-themes-enable-bold t)   ; if nil, bold is universally disabled
    (setq doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-rouge t)
    ;; (load-theme 'doom-zenburn t)

    ;; enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; corrects (and improves) org-mode's native fontification.
    ;; (doom-themes-org-config)
    )
#+end_src

** frames

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (ns-pop-up-frames nil)

  :bind (("C-c w <left>" . windmove-left)
         ("C-c w <right>" . windmove-right)
         ("C-c w <up>" . windmove-up)
         ("C-c w <down>" . windmove-down)))
#+end_src

* internal

** electric pairs

#+begin_src emacs-lisp
(use-package emacs
  :config
  (electric-pair-mode))
#+end_src

** skeletons

#+begin_src emacs-lisp
(setq skeleton-pair t) ; enable pairing

(defun quoted-parentheses (arg)
  (interactive "P")
  (if (looking-back "\\\\")
      (skeleton-insert '(nil "(" _ "\\)") nil)
    (skeleton-pair-insert-maybe arg)))

(defun quoted-brackets (arg)
  (interactive "P")
  (if (looking-back "\\\\")
      (skeleton-insert '(nil "[" _ "\\]") nil)
    (skeleton-pair-insert-maybe arg)))

(global-set-key "(" 'quoted-parentheses)
(global-set-key "[" 'quoted-brackets)
#+end_src

** ispell

maybe for jit: https://github.com/minad/jinx?tab=readme-ov-file

#+begin_src emacs-lisp
  (use-package ispell
    :after exec-path-from-shell
    ;; :if (executable-find "hunspell")
    :custom
    (add-to-list
     'ispell-hunspell-dictionary-alist
     '(("en_GB" "[[:alpha:]]" "[^[:alpha]]" "[0-9']"
        nil nil utf-8)))
    (ispell-program-name "hunspell")
    (ispell-personal-dictionary (concat (getenv "DICPATH") "/hunspell_personal"))
    (ispell-dictionary "en_GB")
    ;; :hook
    ;; (prog-mode . flyspell-mode)
    )
#+end_src

** flymake

#+begin_src emacs-lisp
(use-package flymake
  :bind (:map flymake-mode-map
              ("C-c f n" . flymake-goto-next-error)
              ("C-c f p" . flymake-goto-prev-error)
              ("C-c f e n" . (lambda (&optional N INTERACTIVE)
                             (interactive (list 1 t))
                             (flymake-goto-next-error N '(error) INTERACTIVE)))
              ("C-c f e p" . (lambda (&optional N INTERACTIVE)
                             (interactive (list 1 t))
                             (flymake-goto-previous-error N '(error) INTERACTIVE))))
  ;; :hook
  ;; (prog-mode . flymake-mode)
  )
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure
  :bind (:map flycheck-mode-map
              ("C-c e n" . flycheck-next-error)
              ("C-c e p" . flycheck-prev-error)
  )
)
#+end_src

*** rust

#+begin_src emacs-lisp
(use-package flycheck-rust
  :after flycheck
  :hook
  (flycheck-mode . flycheck-rust-setup)
)
#+end_src

** which-key

shows command completions

#+begin_src emacs-lisp
(use-package which-key
  :demand t
  :custom
  (which-key-sort-order 'which-key-prefix-then-key-order)
  :init
  (setq which-key-idle-delay 0.1)
  (setq which-key-max-display-columns nil)
  :config
  (which-key-mode t)
  (which-key-setup-minibuffer)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold))
#+end_src

* external, etc.

** browse kill ring

#+begin_src emacs-lisp
(use-package browse-kill-ring)
#+end_src

** exec-path-from-shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :pin melpa-stable
  :if (memq window-system '(mac ns x darwin))
  :demand
  :init
  (setq exec-path-from-shell-arguments '("-l"))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "DICPATH"))
#+end_src

To see:

#+begin_src emacs-lisp
;; (getenv "PATH")
#+end_src

** highlight indentation

- To highlight indentations
  - Options are fill, column, and character
  - There's no way to get indentation on empty lines as of now

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-auto-odd-face-perc 75)
  (highlight-indent-guides-auto-even-face-perc 75)
  (highlight-indent-guides-auto-character-face-perc 80)
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+end_src

** multiple cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :pin melpa-stable
  :bind (("C->" . mc/mark-next-like-this)
	     ("C-<" . mc/mark-previous-like-this)
	     ("C-c C->" . mc/mark-all-like-this)
	     ("C-c C-SPC" . mc/edit-lines)
	     ("M-<M-down-mouse-1>" . mc/add-cursor-on-click)))
#+end_src

** no-littering

#+begin_src emacs-lisp
(use-package no-littering
  :pin melpa-stable
  :init
  (require 'recentf)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  :config
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (setq create-lockfiles nil
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t))
#+end_src

** COMMENT puni

The default `puni-mode-map' respects emacs. We don't, so clear and rewrite it.

#+begin_src emacs-lisp
(use-package puni
  :defer t
  :config
  (puni-global-mode)
  (setcdr puni-mode-map nil)
  :bind
  (:map puni-mode-map
        ("DEL" . puni-backward-delete-char)
        ("C-d" . puni-forward-delete-char)
        ("M-d" . puni-forward-kill-word)
        ("M-DEL" . puni-backward-kill-word)
        ("C-k" . puni-kill-line)
        ("C-u" . puni-backward-kill-line)
        ("C-h" . puni-force-delete)
        ("C-M-f" . puni-forward-sexp)
        ("C-M-b" . puni-backward-sexp)
        ("C-M-a" . puni-beginning-of-sexp)
        ("C-M-e" . puni-end-of-sexp)
        )
  :config
  (setq puni--debug t puni-confirm-when-delete-unbalanced-active-region nil)
  :hook
  (term-mode #'puni-disable-puni-mode)
  ;\;\(prog-mode #'puni-flyindent-mode)
  )
#+end_src

** rainbow delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :pin melpa-stable
  :hook
  (prog-mode . rainbow-delimiters-mode)
  :custom-face ;; https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/
  (rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
  (rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
  (rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
  (rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
  (rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
  (rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
  (rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
  (rainbow-delimiters-depth-8-face ((t (:foreground "sienna1")))))
#+end_src

** undo and redo

#+begin_src emacs-lisp
(use-package undo-fu
  :init
  (setq undo-limit (* 64 1024 1024)) ; 64mb.
  (setq undo-strong-limit (* 96 1024 1024)) ; 96mb.
  (setq undo-outer-limit (* 960 1024 1024)) ; 960mb.
  :config
  (global-set-key (kbd "C-/") 'undo-fu-only-undo)
  (global-set-key (kbd "C-?") 'undo-fu-only-redo))
#+end_src


#+begin_src emacs-lisp
(use-package undo-fu-session
  :init
  (undo-fu-session-global-mode)
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
#+end_src

#+begin_src emacs-lisp
(use-package vundo
  :config
  (setq vundo-compact-display nil) ;; Take less on-screen space.
  (global-set-key (kbd "C-x u") 'vundo)
  (custom-set-faces ;; Better contrasting highlight.
    '(vundo-node ((t (:foreground "#808080"))))
    '(vundo-stem ((t (:foreground "#808080"))))
    '(vundo-highlight ((t (:foreground "#FFFF00")))))

  ;; (define-key vundo-mode-map (kbd "h") #'vundo-backward)
  ;; (define-key vundo-mode-map (kbd "<left>") #'vundo-backward)
  ;; (define-key vundo-mode-map (kbd "<down>") #'vundo-next)
  ;; (define-key vundo-mode-map (kbd "<up>") #'vundo-previous)
  ;; (define-key vundo-mode-map (kbd "<home>") #'vundo-stem-root)
  ;; (define-key vundo-mode-map (kbd "<end>") #'vundo-stem-end)
  ;; (define-key vundo-mode-map (kbd "q") #'vundo-quit)
  ;; (define-key vundo-mode-map (kbd "C-g") #'vundo-quit)
  ;; (define-key vundo-mode-map (kbd "RET") #'vundo-confirm))
)
#+end_src

* git

** diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
  :pin melpa-stable
  :init
  (setq diff-hl-draw-borders t)
  :config
  (face-spec-set 'diff-hl-insert `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (face-spec-set 'diff-hl-delete `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (face-spec-set 'diff-hl-change `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (diff-hl-show-hunk-mouse-mode)
  :hook
  ((magit-pre-refresh . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh)))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :pin melpa-stable
  :bind
  (("C-c g s" . magit-status)
   ("C-c g g" . magit-status)
   ("C-c g S" . magit-status-here)
   ("C-c g b" . magit-blame)
   ("C-c g l" . magit-log)
   ("C-c g d" . magit-diff)
   ("C-c g r" . magit-refresh))
  :custom
  (magit-log-arguments '("--graph" "--decorate" "--color")))
#+end_src

#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :config (magit-todos-mode t))
#+end_src

#+begin_src emacs-lisp
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

* org

#+begin_src emacs-lisp
(use-package org
  :defer t
  :mode ("\\.org" . org-mode)
  :custom
  (org-directory "~/Documents/Org")
  (org-agenda-files (file-expand-wildcards "~/Documents/Org/*.org")) ;; Include all org files from a directory into the agenda.
  (org-default-notes-file (concat org-directory "/OrgCapture.org"))
  (org-src-fontify-natively t) ;; use syntax-highlighting for src blocks
  (org-src-preserve-indentation t) ;; preserve indentation in src blocks, don't re-indent
  (org-src-tab-acts-natively t) ;; respect the src block syntax for tabs
  (org-startup-truncated nil) ;; wrap lines on startup
  (org-catch-invisible-edits 'show-and-error) ;; if editing in an invisible region, complain.
  (org-confirm-babel-evaluate t) ;; ask when evaluating every src block
  (org-hide-emphasis-markers nil) ;; don't hide emphasis markers, because there are soo many
  (org-pretty-entities t) ;; try to draw utf8 characters, don't just show their code
  (org-fontify-quote-and-verse-blocks t) ;; add a background to begin_quote and begin_verse blocks.
  (org-cycle-separator-lines -1) ;; don't collapse blank lines when collapsing a tree
  (org-tag-column 0) ;; don't align tags
  (org-adapt-indentation nil) ;; prevent demoting heading also shifting text inside sections
  ;; leave shift keys alone!
  (org-support-shift-select t)
  (org-replace-disputed-keys t)

  (org-fontify-done-headline t)
  (org-fontify-whole-heading-line t)
  (org-list-allow-alphabetical t)

  (org-log-done 'time) ;; Auto add time and closing note to done
  (org-log-done 'note)

  ;; :hook
  ;; (org-mode . flyspell-mode)
  ;; (org-mode . flyspell-buffer)

  :config
  (add-to-list 'org-structure-template-alist '("se" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("ss" . "src sh"))
  (add-to-list 'org-structure-template-alist '("sp" . "src python"))
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((dot . t)
                                 (emacs-lisp . t)
                                 (latex . t)
                                 (lisp . t)
                                 (org . t)
                                 (scheme . t))))
#+end_src

* languages

** COMMENT ASP

#+begin_src emacs-lisp
(use-package clingo-asp-mode
  :mode "\\.lp\\'"
  :vc (:fetcher github :repo teeaychem/clingo-asp-mode))
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'load-path (concat user-emacs-directory "../../projects/emacs/clingo-asp-mode/"))

;; (use-package clingo-asp-mode
;;   :mode ("\\.lp\\'")
;;   :load-path (lambda() (concat user-emacs-directory "../../projects/emacs/clingo-asp-mode/")))
#+end_src

** C/pp

#+begin_src emacs-lisp
(use-package clang-format
  :defer t
  :bind
  (("C-c f r" . clang-format-region)
   ("C-c f b" . clang-format-buffer))
  :init
  (setq clang-format-style-option "llvm"))
#+end_src

#+begin_src emacs-lisp
(use-package cmake-mode
  :defer t
  :mode ("CMakeLists.txt" . cmake-mode))
#+end_src

** LaTeX

#+begin_src emacs-lisp
(use-package tex
  :mode ("\\.tex\\'" . LaTeX-mode)
  :defer t
  :ensure auctex
  :hook
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  (LaTeX-mode . TeX-source-correlate-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode .	(lambda () (set (make-variable-buffer-local 'TeX-electric-math) (cons "\\(" "\\)"))))
  :custom
  (TeX-master nil) ; All master files called "master".
  (TeX-auto-save t)
  (TeX-save-query nil)
  (TeX-parse-self t)
  (reftex-plug-into-AUCTeX t)
  (TeX-electric-sub-and-superscript t)
  (LaTeX-electric-left-right-brace t)
  (TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (TeX-view-program-list '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -r -b -g %n %o %b")))
  (TeX-source-correlate-method-active 'synctex)
  (font-latex-fontify-sectioning 'color)
  (font-latex-fontify-script nil)
  (LaTeX-math-abbrev-prefix "C-c 1")
  :custom-face
  ;; (font-latex-math-face ((t (:foreground "pale violet red"))))
  (font-latex-subscript-face ((t nil)))
  (font-latex-superscript-face ((t nil))))
#+end_src

- use Skim as default pdf viewer
  - Skim's displayline is used for forward search (from .tex to .pdf)
  - option -r relaods the file; option -b highlights the current line; option -g opens Skim in the background
  - For this to work, it seems one needs no spaces in the file name

#+begin_src emacs-lisp
(use-package auctex-latexmk
  :init
  (auctex-latexmk-setup)
  (add-to-list 'TeX-command-list '("Other" "" TeX-run-command t t :help "Run an arbitrary command"))
  (add-to-list 'TeX-command-list '("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files"))
  (add-to-list 'TeX-command-list '("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer"))
  (add-to-list 'TeX-command-list '("Biber" "biber %(output-dir) %s"
                                   TeX-run-Biber nil (plain-TeX-mode LaTeX-mode) :help "Run Biber"))
  (add-to-list 'TeX-command-list '("BibTeX" "bibtex %(O?aux)"
                                   TeX-run-BibTeX nil (plain-TeX-mode LaTeX-mode ConTeXt-mode) :help "Run BibTeX"))
  (add-to-list 'TeX-command-list '("LaTeX" "%`%l%(mode)%' %T" TeX-run-TeX nil (LaTeX-mode) :help "Run LaTeX"))
  (add-to-list 'TeX-command-list '("LatexMk" "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t"
                                   TeX-run-latexmk nil (plain-TeX-mode LaTeX-mode) :help "Run LatexMk")))
#+end_src

** COMMENT lean

#+begin_src emacs-lisp
(use-package lean4-mode
  :commands lean4-mode
  :vc (:url "https://github.com/leanprover-community/lean4-mode.git"
       :rev :last-release
       )
  :mode "\\.lean\\'")
#+end_src

** lua

#+begin_src emacs-lisp
(use-package lua-mode
  :defer t
  :custom
  (lua-indent-level 4))
#+end_src

** markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :pin melpa-stable
  :defer t
  :mode (("/README\\(?:\\.md\\)?\\'" . gfm-mode)
         ("\\.m[k]d\\'" . gfm-mode))
  :config
  (setq markdown-fontify-code-blocks-natively t
        markdown-header-scaling t)
  (setq-default markdown-enable-math t))
#+end_src

** OCaml

#+begin_src emacs-lisp
(use-package tuareg
  :defer t
  :pin melpa-stable
  :mode (("\\.ocamlinit\\'" . tuareg-mode)))

(use-package dune
  :defer t
  :pin melpa-stable)

(use-package utop
  :defer t
  :pin melpa-stable
  :config
  (add-hook 'tuareg-mode-hook #'utop-minor-mode)
  (setq utop-command "opam exec -- utop -emacs")
  ;; (setq utop-command "opam exec -- dune utop . -- -emacs")
  )
#+end_src

** python

#+begin_src emacs-lisp
(use-package python
  :defer t
  :config
  (setq-default python-indent-offset 4)
  (setq-default python-indent-guess-indent-offset-verbose nil))
#+end_src

#+begin_src emacs-lisp
(use-package pet
  :pin melpa-stable
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10)
  (add-hook 'python-base-mode-hook
            (lambda ()
              (setq-local python-shell-interpreter (pet-executable-find "python3")
                          python-shell-virtualenv-root (pet-virtualenv-root))
              (pet-eglot-setup))))
#+end_src

** rust

https://robert.kra.hn/posts/rust-emacs-setup/

#+begin_src emacs-lisp
(use-package rust-mode
  :pin melpa
  :mode "\\.rs\\'"
  :init
  (setq rust-mode-treesitter-derive t)
  (setq rust-format-on-save nil)
  (setq rust-ts-flymake-command '("cargo" "clippy"))
  :config
  (rust-indent-offset 4)
)
#+end_src


#+begin_src emacs-lisp
(use-package cargo
  :diminish cargo-minor-mode
  :hook (rust-mode . cargo-minor-mode)
)
#+end_src

#+begin_src emacs-lisp
(use-package toml-mode :defer t)
#+end_src

** COMMENT z3

#+begin_src emacs-lisp
(use-package boogie-friends
  :defer t)
#+end_src

* completion

** cape

#+begin_src emacs-lisp
(use-package cape
  :pin melpa
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ;; ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

** consult

*** local macros

Macro to add the same regex to a collection of consult filters.
These buffers can be seen by using space

#+begin_src emacs-lisp :results silent
  (defmacro add-to-consult-hide-filter (regex)
    `(progn
       (with-eval-after-load 'consult
         (add-to-list 'recentf-exclude ,(format "%s" regex))
         (add-to-list 'consult-buffer-filter ,(format "%s" regex)))))

  (add-to-consult-hide-filter "magit")
#+end_src

*** main

#+begin_src emacs-lisp :results silent :noweb yes
(use-package consult
  :pin melpa
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s G" . consult-grep)
         ("M-s g" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("C-S-s" . consult-line)
         ("M-s s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history)                 ;; orig. previous-matching-history-element
         )
  ;; Enable automatic preview at point in the *Completions* buffer. This is relevant when you use the default completion UI.
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init

  ;; Configure the register formatting. This improves the register preview for `consult-register', `consult-register-load', `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5)
  (setq register-preview-function #'consult-register-format)

  ;; Tweak the register preview window. This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)

  :config ;; Configure other variables and modes in the :config section, after lazily loading the package.

  ;; Optionally configure preview. The default value is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  (setq consult-narrow-key "<"))
#+end_src

*** macro

**** narrowing

Set project to use uppercase key

#+begin_src emacs-lisp
(with-eval-after-load 'consult
  (dolist (src consult-buffer-sources)
    (if (eq src 'consult--source-project-buffer-hidden)
      (set src (plist-put (symbol-value src) :narrow '(?P . "Project"))))))
#+end_src

Macro based off https://github.com/minad/consult#multiple-sources

#+begin_src emacs-lisp
(with-eval-after-load 'consult
  (defmacro consult-filter-macro (name mode nrw)
    `(progn
      (defvar ,(intern (format "+consult-%s-filter" name))
        (list
         :hidden   t
         :name     ,(format "%s" name)
         :category 'buffer
         :narrow   ,nrw
         :face     'consult-buffer
         :history  'buffer-name-history
         :state    #'consult--buffer-state
         :items    (lambda ()
                     (consult--buffer-query
                      :mode ,mode
                      :exclude (cl-set-difference consult-buffer-filter ,(intern (format "+consult-%s-filter" name)))
                      :as #'buffer-name))))
      (add-to-list 'consult-buffer-sources ',(intern (format "+consult-%s-filter" name)) 'append))))
#+end_src

Instances of the macro

#+begin_src emacs-lisp
(with-eval-after-load 'consult
  (consult-filter-macro "C/pp" '(c-mode c++-mode c-ts-mode c++-ts-mode cmake-mode cmake-ts-mode) ?c)
  (consult-filter-macro "Lua" '(lua-mode lua-ts-mode) ?l)
  (consult-filter-macro "Org" '(org-mode) ?o)
  (consult-filter-macro "Python" '(python-mode python-ts-mode) ?p)
  (consult-filter-macro "Rust" '(rust-mode rust-ts-mode) ?r)
  (consult-filter-macro "TeX" '(latex-mode LaTeX-mode tex-mode TeX-mode) ?t)
  )
#+end_src

***** other

Something like this can be used to hide custom buffer sources without specifying hidden.
From: https://github.com/minad/consult/wiki#hide-all-sources-except-normal-buffers-in-consult-buffer-by-default

#+begin_src emacs-lisp
;; (with-eval-after-load 'consult
;;   (dolist (src consult-buffer-sources)
;;     (unless (eq src 'consult--source-buffer)
;;       (set src (plist-put (symbol-value src) :hidden t)))))
#+end_src

**** regex to ignore matching buffers

*** consult-project-extra

https://github.com/Qkessler/consult-project-extra

#+begin_src emacs-lisp
(use-package consult-project-extra
  :bind
  (("C-c p f" . consult-project-extra-find)
   ("C-c p o" . consult-project-extra-find-other-window)))
#+end_src

** corfu

#+begin_src emacs-lisp
(use-package corfu
  :pin melpa
  :init
  (global-corfu-mode)
  ;; Optional customizations
  :custom
  (corfu-cycle nil)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Automatically display popups wherever available
  (corfu-auto-delay 0.1)
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  (corfu-preselect 'directory) ;; Select the first candidate, except for directories
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can be used globally (M-/).  See also the customization variable `global-corfu-modes' to exclude certain modes.
  :bind
  (:map corfu-map
	("RET" . nil) ;; Free the RET key for less intrusive behavior.
        ("C-<return>" . corfu-insert) ;;
        ("M-_" . corfu-info-documentation) ;;
        ;; ("C-SPC" . corfu-insert-separator) ;;
	)
  )
#+end_src

** marginalia

adds marginalia to the minibuffer completions

#+begin_src emacs-lisp
(use-package marginalia
  :pin melpa
  :init
  (marginalia-mode)
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right))
#+end_src

** orderless

#+begin_src emacs-lisp
(use-package orderless
  :pin melpa
  :custom
  (completion-styles '(orderless partial-completion basic))
  (completion-category-defaults nil)
  (completion-category-overrides nil)
  ;; (completion-category-overrides '((file (styles partial-completion))))
  )
#+end_src

** vertico

vertico for minibuffer completions

#+begin_src emacs-lisp
(use-package vertico
  :pin melpa
  :init
  (vertico-mode)
  ;; (setq vertico-scroll-margin 0) ;; Different scroll margin
  (setq vertico-count 40) ;; Show more candidates
  (setq vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (setq vertico-cycle t)) ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
#+end_src

** embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** ignored extensions

#+begin_src emacs-lisp
(push ".DS_store" completion-ignored-extensions)
#+end_src

* COMMENT eglot

maybe: https://github.com/casouri/eldoc-box

#+begin_src emacs-lisp
(use-package eglot
  :pin gnu-devel
  :init
  (setq eldoc-echo-area-prefer-doc-buffer nil)
  (setq eldoc-echo-area-use-multiline-p t)

  :custom
  (eglot-report-progress nil)
  (eglot-extend-to-xref t)
  (corfu-preview-current nil)
  ;; (eglot-confirm-server-edits t)

  :config
  ;; (add-to-list 'eglot-stay-out-of 'flymake)

  ;; :hook ((…-mode) . eglot-ensure)
  :bind (("C-c l a" . eglot-code-actions)
         ("C-c l c" . eglot-reconnect)
         ("C-c l d" . flymake-show-buffer-diagnostics)
         ("C-c l e" . eldoc-doc-buffer)
         ("C-c l f f" . eglot-format)
         ("C-c l f b" . eglot-format-buffer)
         ("C-c l i" . eglot-find-implementation)
         ("C-c l l" . eglot)
         ("C-c l r n" . eglot-rename)
         ("C-c l s" . eglot-shutdown)
         ("C-c l t" . #'eldoc-print-current-symbol-info))
  :custom-face
  (eglot-highlight-symbol-face ((t (:bold t
                                    :italic t
                                    :underline t))))
  ;; :hook
  ;; (eglot-managed-mode . #'my/eglot-capf)
  )

(defun my/eglot-capf ()
  (setq-local completion-at-point-functions
              (list (cape-capf-super
                     #'eglot-completion-at-point
                     #'tempel-expand
                     #'cape-file))))

(add-hook 'eglot-managed-mode-hook #'my/eglot-capf)
(add-to-consult-hide-filter "\*EGLOT")
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  ;; (add-to-list 'eglot-server-programs '(LaTeX-mode . ("TexLab")))
  (add-to-list 'eglot-server-programs '((rust-ts-mode rust-mode) .
                                        ("rustup" "run" "stable" "rust-analyzer"
                                         :initializationOptions (:check (:command "clippy")))))
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd")))
  (add-to-list 'eglot-server-programs '(python-mode . ("pylsp")))
  ;; (add-to-list 'eglot-server-programs '(python-mode . ("basedpyright-langserver" "--stdio")))
  )
#+end_src

** eglot-booster

#+begin_src emacs-lisp
(use-package eglot-booster
    :vc (eglot-booster :url "https://github.com/jdtsmith/eglot-booster"
                       :rev :newest)
	:after eglot
	:config	(eglot-booster-mode))
#+end_src

** eglot-x

https://github.com/nemethf/eglot-x#rust-analyzer-extensions
for rust dev

#+begin_src emacs-lisp
(use-package eglot-x
  :vc (eglot-x :url "https://github.com/nemethf/eglot-x"
               :rev :newest)
  :after eglot
  :config
  (eglot-x-setup))
#+end_src

** eglot-tempel

#+begin_src emacs-lisp
(use-package eglot-tempel
  :after eglot
  :preface (eglot-tempel-mode)
  :init
  (eglot-tempel-mode t))
#+end_src

* lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :pin melpa
  :commands lsp

  :init
  (setq lsp-keymap-prefix "C-c l")

  :custom
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

  (lsp-completion-provider :none)
  (lsp-modeline-diagnostics-scope :file)
  (lsp-modeline-code-actions-enable nil)
  (lsp-auto-execute-action nil)
  (lsp-eldoc-render-all nil)
  (lsp-treemacs-sync-mode 1)
  (lsp-inlay-hint-enable t)
  (lsp-keep-workspace-alive nil)
  (lsp-headerline-breadcrumb-enable nil)

  ;; Rust things
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-diagnostics-disabled ["inactive-code"])
  (lsp-rust-analyzer-server-display-inlay-hints t)
  ;; (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t)
  (lsp-rust-analyzer-display-closure-return-type-hints t)

  :custom-face
  (lsp-face-highlight-textual ((t (:foreground unspecified :background unspecified :bold t :italic t :underline t))))
  (lsp-face-highlight-read ((t (:bold t :italic t :underline t))))
  (lsp-face-highlight-read ((t (:bold t :italic t :underline t))))
  (lsp-inlay-hint-face ((t (:height 0.8))))

  :hook (((rust-mode rust-ts-mode) . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))

  )
#+end_src

#+begin_src emacs-lisp
(use-package lsp-snippet-tempel
  :vc (lsp-snippet-tempel :url "https://github.com/svaante/lsp-snippet"
               :rev :newest)
  :after lsp-mode
  :config
  (when (featurep 'lsp-mode)
    (lsp-snippet-tempel-lsp-mode-init))
)
#+end_src

** booster

#+begin_src emacs-lisp
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

** lsp-treemacs

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode
  (lsp-treemacs-sync-mode t))
#+end_src

* treesit

https://github.com/renzmann/treesit-auto
https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html

#+begin_src emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  ;; :config
  ;; (treesit-auto-add-to-auto-mode-alist 'all)
  ;; (global-treesit-auto-mode)
  )

(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
#+end_src

* tempel

#+begin_src emacs-lisp
(use-package tempel
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))
  :init
  (defun tempel-setup-capf () ;; Setup completion at point
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches.
    ;; Alternatively use `tempel-complete' if you want to see all matches, but then you should also configure `tempel-trigger-prefix', such that Tempel does not trigger too often when you don't expect it.
    ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf, such that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))
  ;; Optionally make the Tempel templates available to Abbrev, either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  :custom
  (tempel-path (concat user-emacs-directory "tempel/templates.eld"))
  ;; (tempel-trigger-prefix "<") ;; Require trigger prefix before template name when completing.
  :hook
  ((conf-mode
    prog-mode
    text-mode) . tempel-setup-capf)
)
#+end_src
